<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.tzcpa.mapper.student.TeamMonthlyProfitStatementMapper" >
  <resultMap id="BaseResultMap" type="com.tzcpa.model.student.TeamMonthlyProfitStatementDO" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <result column="id" property="id" jdbcType="INTEGER" />
    <result column="year" property="year" jdbcType="INTEGER" />
    <result column="month" property="month" jdbcType="INTEGER" />
    <result column="gross_revenue" property="grossRevenue" jdbcType="BIGINT" />
    <result column="operation_revenue" property="operationRevenue" jdbcType="BIGINT" />
    <result column="total_operating_cost" property="totalOperatingCost" jdbcType="BIGINT" />
    <result column="operating_cost" property="operatingCost" jdbcType="BIGINT" />
    <result column="sale_tax_addict" property="saleTaxAddict" jdbcType="BIGINT" />
    <result column="selling_expenses" property="sellingExpenses" jdbcType="BIGINT" />
    <result column="administrative_cost" property="administrativeCost" jdbcType="BIGINT" />
    <result column="development_expenditure" property="developmentExpenditure" jdbcType="BIGINT" />
    <result column="financial_cost" property="financialCost" jdbcType="BIGINT" />
    <result column="assets_impairment_loss" property="assetsImpairmentLoss" jdbcType="BIGINT" />
    <result column="operating_profit" property="operatingProfit" jdbcType="BIGINT" />
    <result column="nonbusiness_income" property="nonbusinessIncome" jdbcType="BIGINT" />
    <result column="nonbusiness_expenditure" property="nonbusinessExpenditure" jdbcType="BIGINT" />
    <result column="total_profit" property="totalProfit" jdbcType="BIGINT" />
    <result column="income_tax_expense" property="incomeTaxExpense" jdbcType="BIGINT" />
    <result column="retained_profits" property="retainedProfits" jdbcType="BIGINT" />
    <result column="begin_year_undistributed_profits" property="beginYearUndistributedProfits" jdbcType="BIGINT" />
    <result column="current_year_undistributed_profits_change" property="currentYearUndistributedProfitsChange" jdbcType="BIGINT" />
    <result column="undistributed_profits_net_profit" property="undistributedProfitsNetProfit" jdbcType="BIGINT" />
    <result column="undistributed_profits_withdrawal_surplus_reserves" property="undistributedProfitsWithdrawalSurplusReserves" jdbcType="BIGINT" />
    <result column="undistributed_profits_distribution_shareholders" property="undistributedProfitsDistributionShareholders" jdbcType="BIGINT" />
    <result column="undistributed_profits_other" property="undistributedProfitsOther" jdbcType="BIGINT" />
    <result column="end_year_undistributed_profits" property="endYearUndistributedProfits" jdbcType="BIGINT" />
    <result column="class_id" property="classId" jdbcType="INTEGER" />
    <result column="team_id" property="teamId" jdbcType="INTEGER" />
    <result column="ym_date" property="ymDate" jdbcType="VARCHAR" />
  </resultMap>
  <insert id="insert" parameterType="com.tzcpa.model.student.TeamMonthlyProfitStatementDO" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into t_team_monthly_profit_statement (`year`, `month`, gross_revenue, 
      operation_revenue, total_operating_cost, operating_cost, 
      sale_tax_addict, selling_expenses, administrative_cost, 
      development_expenditure, financial_cost, assets_impairment_loss, 
      operating_profit, nonbusiness_income, nonbusiness_expenditure, 
      total_profit, income_tax_expense, retained_profits, 
      begin_year_undistributed_profits, current_year_undistributed_profits_change, 
      undistributed_profits_net_profit, undistributed_profits_withdrawal_surplus_reserves, 
      undistributed_profits_distribution_shareholders, undistributed_profits_other, 
      end_year_undistributed_profits, class_id, team_id, 
      ym_date)
    values (#{year,jdbcType=INTEGER}, #{month,jdbcType=INTEGER}, #{grossRevenue,jdbcType=BIGINT}, 
      #{operationRevenue,jdbcType=BIGINT}, #{totalOperatingCost,jdbcType=BIGINT}, #{operatingCost,jdbcType=BIGINT}, 
      #{saleTaxAddict,jdbcType=BIGINT}, #{sellingExpenses,jdbcType=BIGINT}, #{administrativeCost,jdbcType=BIGINT}, 
      #{developmentExpenditure,jdbcType=BIGINT}, #{financialCost,jdbcType=BIGINT}, #{assetsImpairmentLoss,jdbcType=BIGINT}, 
      #{operatingProfit,jdbcType=BIGINT}, #{nonbusinessIncome,jdbcType=BIGINT}, #{nonbusinessExpenditure,jdbcType=BIGINT}, 
      #{totalProfit,jdbcType=BIGINT}, #{incomeTaxExpense,jdbcType=BIGINT}, #{retainedProfits,jdbcType=BIGINT}, 
      #{beginYearUndistributedProfits,jdbcType=BIGINT}, #{currentYearUndistributedProfitsChange,jdbcType=BIGINT}, 
      #{undistributedProfitsNetProfit,jdbcType=BIGINT}, #{undistributedProfitsWithdrawalSurplusReserves,jdbcType=BIGINT}, 
      #{undistributedProfitsDistributionShareholders,jdbcType=BIGINT}, #{undistributedProfitsOther,jdbcType=BIGINT}, 
      #{endYearUndistributedProfits,jdbcType=BIGINT}, #{classId,jdbcType=INTEGER}, #{teamId,jdbcType=INTEGER}, 
      #{ymDate,jdbcType=VARCHAR})
  </insert>

  <insert id="insertBanchMonthlyProfitStatement" parameterType="java.util.List">
    insert into t_team_monthly_profit_statement (
      `year`,
      `month`,
      gross_revenue,
      operation_revenue,
      total_operating_cost,
      operating_cost,
      sale_tax_addict,
      selling_expenses,
      administrative_cost,
      development_expenditure,
      financial_cost,
      assets_impairment_loss,
      operating_profit,
      nonbusiness_income,
      nonbusiness_expenditure,
      total_profit,
      income_tax_expense,
      retained_profits,
      begin_year_undistributed_profits,
      current_year_undistributed_profits_change,
      undistributed_profits_net_profit,
      undistributed_profits_withdrawal_surplus_reserves,
      undistributed_profits_distribution_shareholders,
      undistributed_profits_other,
      end_year_undistributed_profits,
      class_id,
      team_id,
      ym_date,
      final_material_cost
    ) values
    <foreach collection="teamMonthlyProfitStatementDOs" item="sl" index="index" separator=",">
      (
      #{sl.year,jdbcType=INTEGER},
      #{sl.month,jdbcType=INTEGER},
      #{sl.grossRevenue,jdbcType=BIGINT},
      #{sl.operationRevenue,jdbcType=BIGINT},
      #{sl.totalOperatingCost,jdbcType=BIGINT},
      #{sl.operatingCost,jdbcType=BIGINT},
      #{sl.saleTaxAddict,jdbcType=BIGINT},
      #{sl.sellingExpenses,jdbcType=BIGINT},
      #{sl.administrativeCost,jdbcType=BIGINT},
      #{sl.developmentExpenditure,jdbcType=BIGINT},
      #{sl.financialCost,jdbcType=BIGINT},
      #{sl.assetsImpairmentLoss,jdbcType=BIGINT},
      #{sl.operatingProfit,jdbcType=BIGINT},
      #{sl.nonbusinessIncome,jdbcType=BIGINT},
      #{sl.nonbusinessExpenditure,jdbcType=BIGINT},
      #{sl.totalProfit,jdbcType=BIGINT},
      #{sl.incomeTaxExpense,jdbcType=BIGINT},
      #{sl.retainedProfits,jdbcType=BIGINT},
      #{sl.beginYearUndistributedProfits,jdbcType=BIGINT},
      #{sl.currentYearUndistributedProfitsChange,jdbcType=BIGINT},
      #{sl.undistributedProfitsNetProfit,jdbcType=BIGINT},
      #{sl.undistributedProfitsWithdrawalSurplusReserves,jdbcType=BIGINT},
      #{sl.undistributedProfitsDistributionShareholders,jdbcType=BIGINT},
      #{sl.undistributedProfitsOther,jdbcType=BIGINT},
      #{sl.endYearUndistributedProfits,jdbcType=BIGINT},
      #{sl.classId,jdbcType=INTEGER},
      #{sl.teamId,jdbcType=INTEGER},
      #{sl.ymDate,jdbcType=VARCHAR},
      #{sl.finalMaterialCost,jdbcType=BIGINT}
      )
    </foreach>
  </insert>






  <insert id="insertSelective" parameterType="com.tzcpa.model.student.TeamMonthlyProfitStatementDO" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into t_team_monthly_profit_statement
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="year != null" >
        `year`,
      </if>
      <if test="month != null" >
        `month`,
      </if>
      <if test="grossRevenue != null" >
        gross_revenue,
      </if>
      <if test="operationRevenue != null" >
        operation_revenue,
      </if>
      <if test="totalOperatingCost != null" >
        total_operating_cost,
      </if>
      <if test="operatingCost != null" >
        operating_cost,
      </if>
      <if test="saleTaxAddict != null" >
        sale_tax_addict,
      </if>
      <if test="sellingExpenses != null" >
        selling_expenses,
      </if>
      <if test="administrativeCost != null" >
        administrative_cost,
      </if>
      <if test="developmentExpenditure != null" >
        development_expenditure,
      </if>
      <if test="financialCost != null" >
        financial_cost,
      </if>
      <if test="assetsImpairmentLoss != null" >
        assets_impairment_loss,
      </if>
      <if test="operatingProfit != null" >
        operating_profit,
      </if>
      <if test="nonbusinessIncome != null" >
        nonbusiness_income,
      </if>
      <if test="nonbusinessExpenditure != null" >
        nonbusiness_expenditure,
      </if>
      <if test="totalProfit != null" >
        total_profit,
      </if>
      <if test="incomeTaxExpense != null" >
        income_tax_expense,
      </if>
      <if test="retainedProfits != null" >
        retained_profits,
      </if>
      <if test="beginYearUndistributedProfits != null" >
        begin_year_undistributed_profits,
      </if>
      <if test="currentYearUndistributedProfitsChange != null" >
        current_year_undistributed_profits_change,
      </if>
      <if test="undistributedProfitsNetProfit != null" >
        undistributed_profits_net_profit,
      </if>
      <if test="undistributedProfitsWithdrawalSurplusReserves != null" >
        undistributed_profits_withdrawal_surplus_reserves,
      </if>
      <if test="undistributedProfitsDistributionShareholders != null" >
        undistributed_profits_distribution_shareholders,
      </if>
      <if test="undistributedProfitsOther != null" >
        undistributed_profits_other,
      </if>
      <if test="endYearUndistributedProfits != null" >
        end_year_undistributed_profits,
      </if>
      <if test="classId != null" >
        class_id,
      </if>
      <if test="teamId != null" >
        team_id,
      </if>
      <if test="ymDate != null" >
        ym_date,
      </if>
      <if test="finalMaterialCost != null" >
        final_material_cost,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="year != null" >
        #{year,jdbcType=INTEGER},
      </if>
      <if test="month != null" >
        #{month,jdbcType=INTEGER},
      </if>
      <if test="grossRevenue != null" >
        #{grossRevenue,jdbcType=BIGINT},
      </if>
      <if test="operationRevenue != null" >
        #{operationRevenue,jdbcType=BIGINT},
      </if>
      <if test="totalOperatingCost != null" >
        #{totalOperatingCost,jdbcType=BIGINT},
      </if>
      <if test="operatingCost != null" >
        #{operatingCost,jdbcType=BIGINT},
      </if>
      <if test="saleTaxAddict != null" >
        #{saleTaxAddict,jdbcType=BIGINT},
      </if>
      <if test="sellingExpenses != null" >
        #{sellingExpenses,jdbcType=BIGINT},
      </if>
      <if test="administrativeCost != null" >
        #{administrativeCost,jdbcType=BIGINT},
      </if>
      <if test="developmentExpenditure != null" >
        #{developmentExpenditure,jdbcType=BIGINT},
      </if>
      <if test="financialCost != null" >
        #{financialCost,jdbcType=BIGINT},
      </if>
      <if test="assetsImpairmentLoss != null" >
        #{assetsImpairmentLoss,jdbcType=BIGINT},
      </if>
      <if test="operatingProfit != null" >
        #{operatingProfit,jdbcType=BIGINT},
      </if>
      <if test="nonbusinessIncome != null" >
        #{nonbusinessIncome,jdbcType=BIGINT},
      </if>
      <if test="nonbusinessExpenditure != null" >
        #{nonbusinessExpenditure,jdbcType=BIGINT},
      </if>
      <if test="totalProfit != null" >
        #{totalProfit,jdbcType=BIGINT},
      </if>
      <if test="incomeTaxExpense != null" >
        #{incomeTaxExpense,jdbcType=BIGINT},
      </if>
      <if test="retainedProfits != null" >
        #{retainedProfits,jdbcType=BIGINT},
      </if>
      <if test="beginYearUndistributedProfits != null" >
        #{beginYearUndistributedProfits,jdbcType=BIGINT},
      </if>
      <if test="currentYearUndistributedProfitsChange != null" >
        #{currentYearUndistributedProfitsChange,jdbcType=BIGINT},
      </if>
      <if test="undistributedProfitsNetProfit != null" >
        #{undistributedProfitsNetProfit,jdbcType=BIGINT},
      </if>
      <if test="undistributedProfitsWithdrawalSurplusReserves != null" >
        #{undistributedProfitsWithdrawalSurplusReserves,jdbcType=BIGINT},
      </if>
      <if test="undistributedProfitsDistributionShareholders != null" >
        #{undistributedProfitsDistributionShareholders,jdbcType=BIGINT},
      </if>
      <if test="undistributedProfitsOther != null" >
        #{undistributedProfitsOther,jdbcType=BIGINT},
      </if>
      <if test="endYearUndistributedProfits != null" >
        #{endYearUndistributedProfits,jdbcType=BIGINT},
      </if>
      <if test="classId != null" >
        #{classId,jdbcType=INTEGER},
      </if>
      <if test="teamId != null" >
        #{teamId,jdbcType=INTEGER},
      </if>
      <if test="ymDate != null" >
        #{ymDate,jdbcType=VARCHAR},
      </if>
      <if test="finalMaterialCost != null" >
        #{finalMaterialCost,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>

  <select id="getHalfYearData" resultType="map">

    select
    <!-- #营业收入 -->
    sum(tti.final_sales) taking,
    <!-- #销量 -->
    sum(tti.adjusted_sales)
    salesVol,
    <!-- #营业总成本 -->
    sum(IFNULL(tti.final_operating_cost_plus,0)+IFNULL(tti.final_operating_tax_surcharge,0)
    +IFNULL(tti.final_sales_total,0) + IFNULL(tti.final_management_total,0)
    + IFNULL(tti.in_development_cost,0) + IFNULL(tti.final_financial_cost,0)
    +IFNULL(tti.final_assets_impairment_loss_total,0) )
    totalOperatingCost,
    <!-- #营业成本 -->
    sum(IFNULL(tti.final_operating_cost_plus,0)) operatingCost,
    <!-- #营业税金及附加 -->
    sum(IFNULL(tti.final_operating_tax_surcharge,0)) saleTaxAddict,
    <!-- #销售费用 -->
    sum(IFNULL(tti.final_sales_total,0)) sellingExpenses,
    <!-- #管理费用-->
    sum(IFNULL(tti.final_management_total,0)) administrativeCost,
    <!-- #财务费用 -->
    sum(IFNULL(tti.final_financial_cost,0)) financialCost,
    <!-- #营业利润 -->
    sum(IFNULL(tti.final_sales,0)) -
    sum(IFNULL(tti.final_operating_cost_plus,0)+IFNULL(tti.final_operating_tax_surcharge,0)
    +IFNULL(tti.final_sales_total,0) + IFNULL(tti.final_management_total,0)
    + IFNULL(tti.in_development_cost,0) + IFNULL(tti.final_financial_cost,0)
    +IFNULL(tti.final_assets_impairment_loss_total,0) )
    operatingProfit
    from t_team_intermediate tti
    where tti.class_id = #{classId} and tti.team_id = #{teamId}
    and tti.`year` = #{year} and tti.`month` &lt; 7
  </select>

  <select id="selectFromIntermediate" resultType="com.tzcpa.model.student.TeamMonthlyProfitStatementDO">
          select profit.*,
              <!-- #营业利润 -->
            (profit.grossRevenue - profit.totalOperatingCost) operatingProfit,
          <!--#利润总额-->
          (profit.grossRevenue - profit.totalOperatingCost + profit.nonbusinessIncome
          - profit.nonbusinessExpenditure) totalProfit,
          <!--#所得税费用-->
         ROUND(((profit.grossRevenue - profit.totalOperatingCost + profit.nonbusinessIncome
         - profit.nonbusinessExpenditure) * 0.15 )) incomeTaxExpense,

         ROUND(((profit.grossRevenue - profit.totalOperatingCost + profit.nonbusinessIncome
         - profit.nonbusinessExpenditure) * 0.85 )) retainedProfits

          from (
             SELECT
                tti.class_id classId,
                 tti.team_id teamId,
                 tti.`year`,
                 tti.month,
    CONCAT(tti.year,'-',case when length(tti.month) =1 then CONCAT('0',tti.month) else tti.month end ) ymDate,
              <!-- #营业总收入 -->
               sum(IFNULL(tti.final_sales,0)) grossRevenue,
              <!--#营业收入-->
           sum(IFNULL(tti.final_sales,0)) operationRevenue,
              <!--#营业总成本 + IFNULL(tti.in_development_cost,0) -->
              sum(IFNULL(tti.final_operating_cost_plus,0)+IFNULL(tti.final_operating_tax_surcharge,0)
                +IFNULL(tti.final_sales_total,0) + IFNULL(tti.final_management_total,0)
                 + IFNULL(tti.final_financial_cost,0)
                  +IFNULL(tti.final_assets_impairment_loss_total,0) )
              totalOperatingCost,
              <!--#营业成本-->
               sum(IFNULL(tti.final_operating_cost_plus,0)) operatingCost,
              <!--#税金及附加-->
               sum(IFNULL(tti.final_operating_tax_surcharge,0)) saleTaxAddict,
              <!--#销售费用-->
               sum(IFNULL(tti.final_sales_total,0)) sellingExpenses,
              <!--#管理费用-->
               sum(IFNULL(tti.final_management_total,0)) administrativeCost,
               <!--#研发费用-->
               sum(IFNULL(tti.in_development_cost,0)) developmentExpenditure,
               <!--#财务费用-->
               sum(IFNULL(tti.final_financial_cost,0)) financialCost,
               <!--#资产减值损失-->
               sum(IFNULL(tti.final_assets_impairment_loss_total,0)) assetsImpairmentLoss,
               <!--#营业外收入-->
               sum(IFNULL(tti.final_nonbusiness_income,0)) nonbusinessIncome,
               <!--#营业外支出-->
               sum(IFNULL(tti.final_nonbusiness_expenditure,0)) nonbusinessExpenditure,
               <!-- 最终材料成本 -->
               sum(IFNULL(tti.final_material_cost,0)) finalMaterialCost

             FROM
                 t_team_intermediate tti
             WHERE
                 tti.class_id = #{classId}
              AND tti.team_id = #{teamId}
              AND tti.ym_date >= concat(#{year},'-',
             case when length(#{month}) =1 then CONCAT('0',#{month}) else #{month} end )
              AND tti. ym_date &lt;= concat(#{nextYear},'-',
           case when length(#{nextMonth}) =1 then CONCAT('0',#{nextMonth}) else #{nextMonth} end )
             GROUP BY tti.team_id,tti.year,tti.month
         ) profit
   </select>

    <select id="getMonthlyForm" resultType="com.tzcpa.model.student.TeamMonthlyProfitStatementDO">
         select * from t_team_monthly_profit_statement ttmp
        where ttmp.class_id = #{classId} and ttmp.team_id = #{teamId} and ttmp.year = #{year}
        and ttmp.ym_date &lt;= date_format(#{currentMonth},'%Y-%m')
        order by ttmp.month
    </select>

   </mapper>